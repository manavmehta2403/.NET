// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200615.7

#ifndef WINRT_SDKTemplate_H
#define WINRT_SDKTemplate_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.200615.7"), "Mismatched C++/WinRT headers.");
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/Windows.UI.Xaml.Interop.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/SDKTemplate.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(void) consume_SDKTemplate_IMainPage<D>::NotifyUser(param::hstring const& strMessage, SDKTemplate::NotifyType const& type) const
    {
        check_hresult(WINRT_IMPL_SHIM(SDKTemplate::IMainPage)->NotifyUser(*(void**)(&strMessage), static_cast<int32_t>(type)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_SDKTemplate_IMainPage<D>::Navigate(Windows::UI::Xaml::Interop::TypeName const& name, Windows::Foundation::IInspectable const& parameter) const
    {
        check_hresult(WINRT_IMPL_SHIM(SDKTemplate::IMainPage)->Navigate(impl::bind_in(name), *(void**)(&parameter)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_SDKTemplate_IMainPageStatics<D>::FEATURE_NAME() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(SDKTemplate::IMainPageStatics)->get_FEATURE_NAME(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<SDKTemplate::Scenario>) consume_SDKTemplate_IMainPageStatics<D>::scenarios() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(SDKTemplate::IMainPageStatics)->get_scenarios(&value));
        return Windows::Foundation::Collections::IVector<SDKTemplate::Scenario>{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(SDKTemplate::MainPage) consume_SDKTemplate_IMainPageStatics<D>::Current() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(SDKTemplate::IMainPageStatics)->get_Current(&value));
        return SDKTemplate::MainPage{ value, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, SDKTemplate::ICustomTextBox> : produce_base<D, SDKTemplate::ICustomTextBox>
    {
    };
    template <typename D>
    struct produce<D, SDKTemplate::IMainPage> : produce_base<D, SDKTemplate::IMainPage>
    {
        int32_t __stdcall NotifyUser(void* strMessage, int32_t type) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyUser(*reinterpret_cast<hstring const*>(&strMessage), *reinterpret_cast<SDKTemplate::NotifyType const*>(&type));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName name, void* parameter) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Navigate(*reinterpret_cast<Windows::UI::Xaml::Interop::TypeName const*>(&name), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&parameter));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, SDKTemplate::IMainPageStatics> : produce_base<D, SDKTemplate::IMainPageStatics>
    {
        int32_t __stdcall get_FEATURE_NAME(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FEATURE_NAME());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_scenarios(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<SDKTemplate::Scenario>>(this->shim().scenarios());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Current(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<SDKTemplate::MainPage>(this->shim().Current());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, SDKTemplate::IScenario1_Launch> : produce_base<D, SDKTemplate::IScenario1_Launch>
    {
    };
    template <typename D>
    struct produce<D, SDKTemplate::IScenario2_ShowHideEvents> : produce_base<D, SDKTemplate::IScenario2_ShowHideEvents>
    {
    };
    template <typename D>
    struct produce<D, SDKTemplate::IScenario3_ShowHideMethods> : produce_base<D, SDKTemplate::IScenario3_ShowHideMethods>
    {
    };
    template <typename D>
    struct produce<D, SDKTemplate::IScenario4_ShowView> : produce_base<D, SDKTemplate::IScenario4_ShowView>
    {
    };
}
WINRT_EXPORT namespace winrt::SDKTemplate
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::SDKTemplate::ICustomTextBox> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IMainPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IMainPageStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IScenario1_Launch> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IScenario2_ShowHideEvents> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IScenario3_ShowHideMethods> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IScenario4_ShowView> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::CustomTextBox> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::MainPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::Scenario1_Launch> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::Scenario2_ShowHideEvents> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::Scenario3_ShowHideMethods> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::Scenario4_ShowView> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::XamlMetaDataProvider> : winrt::impl::hash_base {};
#endif
}
#endif
