//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"
#include "MainPage.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

namespace winrt::SDKTemplate::implementation
{
    using Application = ::winrt::Windows::UI::Xaml::Application;
    using ComponentResourceLocation = ::winrt::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation;
    using DataTemplate = ::winrt::Windows::UI::Xaml::DataTemplate;
    using DependencyObject = ::winrt::Windows::UI::Xaml::DependencyObject;
    using DependencyProperty = ::winrt::Windows::UI::Xaml::DependencyProperty;
    using IComponentConnector = ::winrt::Windows::UI::Xaml::Markup::IComponentConnector;
    using Uri = ::winrt::Windows::Foundation::Uri;
    using XamlBindingHelper = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper;

    template <typename D, typename ... I>
    void MainPageT<D, I...>::InitializeComponent()
    {
        if (!_contentLoaded)
        {
            _contentLoaded = true;
            Uri resourceLocator{ L"ms-appx:///MainPage.xaml" };
            Application::LoadComponent(*this, resourceLocator, ComponentResourceLocation::Application);
        }
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::Connect(int32_t connectionId, IInspectable const& target)
    {
        switch (connectionId)
        {
        case 2:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::SplitView>();
                this->Splitter(targetElement);
            }
            break;
        case 3:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::StackPanel>();
                this->HeaderPanel(targetElement);
            }
            break;
        case 4:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Image>();
                this->WindowsLogo(targetElement);
            }
            break;
        case 5:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                this->Header(targetElement);
            }
            break;
        case 6:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Primitives::ToggleButton>();
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Button_Click(p0, p1);
                    }
                });
            }
            break;
        case 7:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::FontIcon>();
                this->Hamburger(targetElement);
            }
            break;
        case 8:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                this->SampleTitle(targetElement);
            }
            break;
        case 9:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ListBox>();
                this->ScenarioControl(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.SelectionChanged([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::Controls::SelectionChangedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->ScenarioControl_SelectionChanged(p0, p1);
                    }
                });
            }
            break;
        case 10:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::StackPanel>();
                this->FooterPanel(targetElement);
            }
            break;
        case 11:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                this->Copyright(targetElement);
            }
            break;
        case 12:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::StackPanel>();
                this->LinksPanel(targetElement);
            }
            break;
        case 13:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::HyperlinkButton>();
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Footer_Click(p0, p1);
                    }
                });
            }
            break;
        case 14:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::HyperlinkButton>();
                this->PrivacyLink(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Footer_Click(p0, p1);
                    }
                });
            }
            break;
        case 17:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Frame>();
                this->ScenarioFrame(targetElement);
            }
            break;
        case 18:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::StackPanel>();
                this->StatusPanel(targetElement);
            }
            break;
        case 19:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                this->StatusLabel(targetElement);
            }
            break;
        case 20:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Border>();
                this->StatusBorder(targetElement);
            }
            break;
        case 21:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                this->StatusBlock(targetElement);
            }
            break;
        }
        _contentLoaded = true;
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::DisconnectUnloadedObject(int32_t)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects to disconnect." };
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::UnloadObject(DependencyObject const&)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects." };
    }

    template <typename D, typename... I>
    IComponentConnector MainPageT<D, I...>::GetBindingConnector(int32_t connectionId, IInspectable const& target)
    {
        ::winrt::com_ptr<::winrt::SDKTemplate::implementation::XamlBindings> bindings;
        switch (connectionId)
        {
            case 16: // MainPage.xaml line 37
                {
                    auto element16 = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    auto objBindings = std::make_unique<MainPage_obj16_Bindings>();
                    objBindings->SetDataRoot(element16.DataContext());
                    bindings = ::winrt::make_self<::winrt::SDKTemplate::implementation::XamlBindings>(std::move(objBindings));
                    bindings->SubscribeForDataContextChanged(element16);
                    DataTemplate::SetExtensionInstance(element16, bindings.as<::winrt::Windows::UI::Xaml::IDataTemplateExtension>());
                    XamlBindingHelper::SetDataTemplateComponent(element16, bindings.as<::winrt::Windows::UI::Xaml::Markup::IDataTemplateComponent>());
                }
                break;
        }
        return bindings ? bindings.as<::winrt::Windows::UI::Xaml::Markup::IComponentConnector>() : nullptr;
    }

    template <typename D, typename ... I>
    struct MainPageT<D, I...>::MainPage_obj16_Bindings
        : public ::winrt::SDKTemplate::implementation::ValueTypeXamlBindings<::winrt::SDKTemplate::Scenario, ::winrt::SDKTemplate::implementation::XamlBindingTrackingBase>
{
        MainPage_obj16_Bindings()
        {
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 16: // MainPage.xaml line 37
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj16 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }

        void Recycle() override
        {
        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = -1;
                    SetDataRoot(item);
                    if (_dataContextChangedToken.value != 0)
                    {
                        this->obj16.get().DataContextChanged(_dataContextChangedToken);
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
            }
            Update_(::winrt::unbox_value<::winrt::SDKTemplate::Scenario>(item) , 1 << phase);
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Controls::TextBlock> obj16;

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::SDKTemplate::Scenario obj, int32_t phase)
        {
                if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                {
                    Update_Title(obj.Title, phase);
                }
        }

        void Update_Title(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED )) != 0)
            {
                // MainPage.xaml line 37
                if (obj16)
                {
                    Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj16.get(), obj);
                }
            }
        }

        static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::winrt::Windows::UI::Xaml::Controls::TextBlock const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }
    }; 

    template struct MainPageT<struct MainPage>;
}


#pragma warning(pop)


